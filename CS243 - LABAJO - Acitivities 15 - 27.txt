; Filename: EXER15.asm
; Name: Ethan Benedict M. Labajo
; Date: September 12, 2025
; Display multiple string variables in a single line
.model small
.stack 100h

.data
    str1 db "This is line 1. ", '$'
    str2 db "This is line 2. ", '$'
    str3 db "This is line 3. ", '$'
    str4 db "This is line 4. ", '$'


.code
main:
    mov ax, @data
    mov ds, ax

    mov ah, 09h

    mov dx, offset str1
    int 21h 
    
    mov dx, offset str2
    int 21h
    
    mov dx, offset str3    
    int 21h

    mov dx, offset str4
    int 21h
    
    int 27h

end main

; Filename: EXER16.asm
; Name: Ethan Benedict M. Labajo
; Date: September 19, 2025
; Display multiple string variables on separate lines

.model small
.stack 100h

.data
    nl db 0Ah, '$'
    str1 db "This is line 1. ", '$'
    str2 db "This is line 2. ", '$'
    str3 db "This is line 3. ", '$'
    str4 db "This is line 4. ", '$'



.code
main:
    mov ax, @data
    mov ds, ax

    mov ah, 09h
    mov dx, offset str1
    int 21h

    mov dx, offset nl
    int 21h

    mov dx, offset str2
    int 21h

    mov dx, offset nl
    int 21h

    mov dx, offset str3
    int 21h

    mov dx, offset nl
    int 21h

    mov dx, offset str4
    int 21h

    int 27h
end main

; Filename: EXER17.asm
; Name: Ethan Benedict M. Labajo
; Date: September 12, 2025
; Get character input and display back character input

.model small
.stack 100h

.data
    inputChar db ?
    inputMsg db "Enter a character: $"
    outputMsg db 0Ah, "You entered: $"
.code
main:
    mov ax, @data
    mov ds, ax

    mov ah, 09h
    mov dx, offset inputMsg
    int 21h

    mov ah, 01h
    int 21h

    mov inputChar, al
    
    mov ah, 09h
    mov dx, offset outputMsg
    int 21h

    mov ah, 02h
    mov dl, inputChar
    int 21h

    int 27h
end main

; Filename: EXER18.asm
; Name: Ethan Benedict M. Labajo
; Date: September 12, 2025
; Get character input continuously get character input and display back input
; Enter key is pressed 

.model small
.stack 100h

.data
    char db ?
    inputMsg db "Enter a character: $"
    outputMsg db "You entered: ", '$' 
    exitMsg db "Exiting program... $"
    nl db 0Ah, '$'


.code
main:
    mov ax, @data
    mov ds, ax

ReadChar:

    mov ah, 09h
    mov dx, offset nl
    int 21h
    mov dx, offset inputMsg
    int 21h

    
    mov ah, 01h ; READ
    int 21h

    cmp al, 13
    je ExitProgram

    mov char, al

    mov ah, 09h
    mov dx, offset nl
    int 21h
    mov dx, offset outputMsg
    int 21h    

    mov ah, 02h
    mov dl, char ; display the character input
    int 21h
    
    jmp readChar

ExitProgram:
    mov ah, 09h
    mov dx, offset exitMsg
    int 21h 

    int 27h

end main
; Filename: EXER19.asm
; Name: Ethan Benedict M. Labajo
; Date: September 12, 2025
; Display Good morning, world! or Good afternoon, world! depending on inputted char.

.model small
.stack 100h

.data
    char db ?
    TimePrompt db 0Ah, "Is it after 12 noon (Y/N)?: $"
    gmmsg db "Good morning, world!$"
    gamsg db "Good afternoon, world!$"
    exitMsg db 0Ah, "Exiting program... $"
    nl db 0Ah, '$'


.code
main:
    mov ax, @data
    mov ds, ax

ReadChar:

    mov ah, 09h
    mov dx, offset nl
    int 21h
    mov dx, offset TimePrompt
    int 21h

    
    mov ah, 01h ; READ
    int 21h

    cmp al, 'y'
    je IsAfternoon

    cmp al, 'Y'
    je IsAfternoon

    cmp al, 'N'
    je IsMorning

    cmp al, 'n'
    je IsMorning

    cmp al, 13
    je ExitProgram

    jmp readChar

IsAfternoon:
    mov ah, 09h
    mov dx, offset nl
    int 21h 

    mov dx, offset gamsg
    int 21h

    jmp ExitProgram

IsMorning:
    mov ah, 09h
    mov dx, offset nl
    int 21h 

    mov dx, offset gmmsg
    int 21h

    jmp ExitProgram

ExitProgram:
    mov ah, 09h
    mov dx, offset exitMsg
    int 21h 

    int 27h

end main

; Filename: EXER20.asm
; Name: Ethan Benedict M. Labajo
; Date: September 12, 2025
; Get string input and output string

.model small
.stack 100h

.data
    inputBuffer db 100        ; Max input length
                db ?          ; Actual input length (set by DOS)
                db 100 dup(?) ; The input string
    prompt db 0Ah, "Enter a string: $"
    nl db 0Ah, '$'
    outmsg db "You entered: $"
    
.code
main:
    mov ax, @data
    mov ds, ax

    mov ah, 09h
    mov dx, offset prompt
    int 21h

    mov ah, 0Ah          ; DOS function to read string input
    mov dx, offset inputBuffer
    int 21h

    mov ah, 09h
    mov dx, offset nl
    int 21h

    mov ah, 09h
    mov dx, offset outmsg
    int 21h

    mov si, offset inputBuffer + 2 ; Point to the actual string
    mov cl, inputBuffer[1]
    mov ch, 0

PrintLoop:
    mov dl, [si]
    mov ah, 02h
    int 21h
    inc si
    loop PrintLoop

    int 27h

end main

; Filename: EXER21.asm
; Name: Ethan Benedict M. Labajo
; Date: September 12, 2025
; Get string input and output string in reverse order

.model small
.stack 100h

.data
    inputBuffer db 100        ; Max input length
                db ?          ; Actual input length (set by DOS)
                db 100 dup(?) ; The input string
    prompt db 0Ah, "Enter a string: $"
    nl db 0Ah, '$'
    outmsg db "You entered in reverse: $"

.code
main:
    mov ax, @data
    mov ds, ax

    mov ah, 09h
    mov dx, offset prompt
    int 21h

    mov ah, 0Ah          ; DOS function to read string input
    mov dx, offset inputBuffer
    int 21h

    mov ah, 09h
    mov dx, offset nl
    int 21h

    mov ah, 09h
    mov dx, offset outmsg
    int 21h

    ; Print string in reverse
    mov cl, inputBuffer[1]
    mov ch, 0
    mov si, offset inputBuffer + 2
    add si, cx         ; Move SI to the end of input
    dec si             ; Point to last character

PrintReverse:
    mov dl, [si]
    mov ah, 02h
    int 21h
    dec si
    loop PrintReverse

    int 27h
end main

; Filename: EXER22.asm
; Name: Ethan Benedict M. Labajo
; Date: September 12, 2025
; Asks user to input 3 characters and display each in its own line.

.model small
.stack 100h

.data

    fprompt db 0Ah, "Enter first character: $"
    sprompt db 0Ah, "Enter second character: $"
    tprompt db 0Ah, "Enter third character: $"
    nl db 0Ah, '$'
    fout db 0Ah, "The first character is: $"
    sout db 0Ah, "The second character is: $"
    tout db 0Ah, "The third character is: $"

    fchar db ?
    schar db ?
    tchar db ?

.code
main:
    mov ax, @data
    mov ds, ax

    mov ah, 09h
    mov dx, offset fprompt
    int 21h

    mov ah, 01h
    int 21h

    mov fchar, al
    mov ah, 09h
    mov dx, offset sprompt
    int 21h

    mov ah, 01h
    int 21h

    mov schar, al
    mov ah, 09h
    mov dx, offset tprompt
    int 21h

    mov ah, 01h
    int 21h

    mov tchar, al
    mov ah, 09h
    mov dx, offset fout
    int 21h

    mov ah, 02h
    mov dl, fchar
    int 21h

    mov ah, 09h
    mov dx, offset nl

    mov ah, 09h
    mov dx, offset sout
    int 21h

    mov ah, 02h
    mov dl, schar
    int 21h

    mov ah, 09h
    mov dx, offset nl

    mov ah, 09h
    mov dx, offset tout
    int 21h

    mov ah, 02h
    mov dl, tchar
    int 21h

    mov ah, 09h
    mov dx, offset nl

    int 27h
end main

; Filename: EXER23.asm
; Name: Ethan Benedict M. Labajo
; Date: September 12, 2025
; Determine if inputted character is 'A' and display appropriate messages for each

.model small
.stack 100h

.data
    char db ?
    prompt db "Enter a character: $"
    typeda db 0Ah, "Yes, you have entered letter A.$"
    nottypeda db 0Ah, "No, you have not entered letter A. You entered character $"
    nl db 0Ah, '$'
    
.code
main:
    mov ax, @data
    mov ds, ax

    mov ah, 09h
    mov dx, offset prompt
    int 21h

    mov ah, 01h
    int 21h

    mov char, al
    cmp al, 'A'
    je IsA

    jmp notA

IsA:
    mov ah, 09h
    mov dx, offset typeda
    int 21h

    int 27h

NotA:
    mov ah, 09h
    mov dx, offset nottypeda
    int 21h

    mov ah, 02h
    mov dl, char
    int 21h

    mov ah, 02h
    mov dl, '.' ; period at the end
    int 21h

    int 27h

end main

; Filename: EXER24.asm
; Name: Ethan Benedict M. Labajo
; Date: September 12, 2025
; Asks for first name, middle name, and last name, and then greets the user with their full name.

.model small
.stack 100h

.data
    fnamep db 0Ah, "Enter First Name: $"
    mnamep db 0Ah, "Enter Middle Name: $"
    famnamep db 0Ah, "Enter Family Name: $"
    greetings db, 0Ah, "Hello, $"
    nl db 0Ah, '$'
    fname db 100        ; Max input length
          db ?          ; Actual input length (set by DOS)
          db 100 dup(?) ; The input string
    mname db 100        ; Max input length
          db ?          ; Actual input length (set by DOS)
          db 100 dup(?) ; The input string
    famname db 100        ; Max input length
          db ?          ; Actual input length (set by DOS)
          db 100 dup(?) ; The input string

.code
main:
    mov ax, @data
    mov ds, ax

    mov ah, 09h
    mov dx, offset fnamep
    int 21h

    mov ah, 0Ah
    mov dx, offset fname   
    int 21h

    mov ah, 09h
    mov dx, offset mnamep
    int 21h

    mov ah, 0Ah
    mov dx, offset mname
    int 21h

    mov ah, 09h
    mov dx, offset famnamep
    int 21h

    mov ah, 0Ah
    mov dx, offset famname
    int 21h

    mov ah, 09h
    mov dx, offset nl
    int 21h

    mov dx, offset greetings
    int 21h

    mov si, offset fname + 2

    mov cl, fname[1]
    mov ch, 0 

print_first:
    mov dl, [si]   
    mov ah, 02h   
    int 21h

    inc si
    loop print_first

    mov ah, 02h
    mov dl, ' '
    int 21h


    mov si, offset mname + 2

    mov cl, mname[1]
    mov ch, 0 

print_second:
    mov dl, [si]   
    mov ah, 02h   
    int 21h

    inc si
    loop print_second

    mov ah, 02h
    mov dl, ' '
    int 21h


    mov si, offset famname + 2

    mov cl, famname[1]
    mov ch, 0 
    
print_third:
    mov dl, [si]   
    mov ah, 02h   
    int 21h

    inc si
    loop print_third

    mov ah, 02h
    mov dl, '!'
    int 21h

    int 27h
end main

; Filename: EXER25.asm
; Name: Ethan Benedict M. Labajo
; Date: September 12, 2025
; Cebu Institute of Technology - University Enrollment Form Program
.model small
.stack 100h

.data
    nl db 0Ah, '$'

    header1 db "Cebu Institute of Technology - University", '$'
    header2 db "STUDENT ENROLLMENT FORM", '$'

    prompt db "Please enter the following information: ", 0Ah, '$'

    pid db "Student ID Number: $"
    pfn db "First Name: $"
    pmn db "Middle Name: $"
    pln db "Last Name: $"
    padd db "Address: $"
    pcourse db "Course: $"
    pyear db "Year: $"
    pmth db "Birthday Month: $"
    pday db "Birthday Day: $"
    pyr db "Birthday Year: $"
    pemail db "Email Address: $"

    summary db 0Ah, "SUMMARY$"
    warning db "Please check if all pieces of information are correct.$"

    inid db 100, ?, 100 dup('$')
    infn db 100, ?, 100 dup('$')
    inmn db 100, ?, 100 dup('$')
    inln db 100, ?, 100 dup('$')
    inadd db 100, ?, 100 dup('$')
    incourse db 100, ?, 100 dup('$')
    inyear db 100, ?, 100 dup('$')
    inmth db 100, ?, 100 dup('$')
    inday db 100, ?, 100 dup('$')
    inyr db 100, ?, 100 dup('$')
    inemail db 100, ?, 100 dup('$')
    
    sid db "ID Number: $"
    sfn db "First Name: $"
    smn db "Middle Name: $"
    sln db "Last Name: $"
    sadd db "Address: $"
    scourseandyear db "Course & Year: $"
    sbday db "Birthday: $"

    greetings db "Thank you for enrolling at CIT-U.$"
    cpyright db "Copyright 2025$" 
    programmer db "Programmer: Ethan Benedict M. Labajo$" 

.code
main:
    mov ax, @data
    mov ds, ax

    mov ah, 09h
    mov dx, offset header1
    int 21h

    call pnl

    mov ah, 09h
    mov dx, offset header2
    int 21h

    call pnl
    call pnl 

    mov ah, 09h
    mov dx, offset prompt
    int 21h

    mov ah, 09h 
    mov dx, offset pid
    int 21h

    ; take input

    mov ah, 0Ah
    mov dx, offset inid
    int 21h

    call pnl

    mov ah, 09h
    mov dx, offset pfn
    int 21h
    mov ah, 0Ah
    mov dx, offset infn
    int 21h
    call pnl

    mov ah, 09h
    mov dx, offset pmn
    int 21h
    mov ah, 0Ah
    mov dx, offset inmn
    int 21h
    call pnl

    mov ah, 09h
    mov dx, offset pln
    int 21h
    mov ah, 0Ah
    mov dx, offset inln
    int 21h
    call pnl

    mov ah, 09h
    mov dx, offset padd
    int 21h
    mov ah, 0Ah
    mov dx, offset inadd
    int 21h
    call pnl

    mov ah, 09h
    mov dx, offset pcourse
    int 21h
    mov ah, 0Ah
    mov dx, offset incourse
    int 21h
    call pnl

    mov ah, 09h
    mov dx, offset pyear
    int 21h
    mov ah, 0Ah
    mov dx, offset inyear
    int 21h
    call pnl

    mov ah, 09h
    mov dx, offset pmth
    int 21h
    mov ah, 0Ah
    mov dx, offset inmth
    int 21h
    call pnl

    mov ah, 09h
    mov dx, offset pday
    int 21h
    mov ah, 0Ah
    mov dx, offset inday
    int 21h
    call pnl

    mov ah, 09h
    mov dx, offset pyr
    int 21h
    mov ah, 0Ah
    mov dx, offset inyr
    int 21h
    call pnl

    mov ah, 09h
    mov dx, offset pemail
    int 21h
    mov ah, 0Ah
    mov dx, offset inemail
    int 21h
    call pnl

    mov ah, 09h
    mov dx, offset summary
    int 21h
    call pnl

    mov ah, 09h
    mov dx, offset warning
    int 21h

    call pnl
    call pnl

    mov dx, offset sid
    int 21h
    mov ah, 09h
    lea dx, [inid+2]
    int 21h
    call pnl

    mov dx, offset sfn
    int 21h
    mov ah, 09h
    lea dx, [infn+2]
    int 21h
    call pnl

    mov dx, offset smn
    int 21h
    mov ah, 09h
    lea dx, [inmn+2]
    int 21h
    call pnl

    mov dx, offset sln
    int 21h
    mov ah, 09h
    lea dx, [inln+2]
    int 21h
    call pnl

    mov dx, offset sadd
    int 21h
    mov ah, 09h
    lea dx, [inadd+2]
    int 21h
    call pnl

    mov dx, offset scourseandyear
    int 21h
    mov ah, 09h
    lea dx, [incourse+2]
    int 21h
    mov ah, 09h
    mov dl, ' '
    int 21h
    mov ah, 09h
    lea dx, [inyear+2]
    int 21h
    call pnl

    mov dx, offset sbday
    int 21h

    ; Print birth month
    mov si, offset inmth
    mov cl, [si+1]
    inc si
    inc si
    mov ch, 0
print_month:
    cmp ch, cl
    jge print_space
    mov ah, 02h
    mov dl, [si]
    int 21h
    inc si
    inc ch
    jmp print_month

print_space:
    mov ah, 02h
    mov dl, ' '
    int 21h

    ; Print birth day
    mov si, offset inday
    mov cl, [si+1]
    inc si
    inc si
    mov ch, 0
print_day:
    cmp ch, cl
    jge print_comma
    mov ah, 02h
    mov dl, [si]
    int 21h
    inc si
    inc ch
    jmp print_day

print_comma:
    mov ah, 02h
    mov dl, ','
    int 21h
    mov ah, 02h
    mov dl, ' '
    int 21h

    ; Print birth year
    mov si, offset inyr
    mov cl, [si+1]
    inc si
    inc si
    mov ch, 0
print_year:
    cmp ch, cl
    jge print_bday_end
    mov ah, 02h
    mov dl, [si]
    int 21h
    inc si
    inc ch
    jmp print_year

print_bday_end:
    call pnl

    mov ah, 09h
    mov dx, offset pemail
    int 21h
    mov ah, 09h
    lea dx, [inemail+2]
    int 21h

    call pnl
    call pnl

    mov ah, 09h
    mov dx, offset greetings
    int 21h
    call pnl

    mov ah, 09h
    mov dx, offset cpyright
    int 21h
    call pnl

    mov ah, 09h
    mov dx, offset programmer
    int 21h
    call pnl

    mov ah, 4Ch
    int 21h

pnl proc
    mov ah, 09h
    mov dx, offset nl
    int 21h
    ret

pnl endp

end main

; Filename: EXER26.asm
; Name: Ethan Benedict M. Labajo
; Date: September 13, 2025
; ATM Main Menu Screen

.model small
.stack 100h

.data
    nl db 0Ah, '$'

    header1 db "Cebu Institute of Technology - University", 0Ah,'$'
    header2 db "Automated Teller Machine", 0Ah, '$'

    ttl db "Main Menu", 0Ah, '$'
    one db "1 Balance Inquiry", 0Ah, '$'
    two db "2 Withdrawal", 0Ah, '$'
    three db "3 Deposit", 0Ah, '$'
    four db "4 Transfer", 0Ah, '$'
    five db "5 Bills Payment", 0Ah, '$'
    six db "6 Change Pin", 0Ah, '$'
    seven db "7 Exit", 0Ah, '$'

    inputBuf db 100, ?, 100 dup('$')
    choice db "Enter number of your choice: $"

    chosen db "You have chosen $";

    egreet db "Thank you for banking with us!", 0Ah, "Copyright 2025", 0Ah, "Progammer: Ethan Benedict M. Labajo", '$'

.code
main:
    mov ax, @data
    mov ds, ax

    mov ah, 09h

    mov dx, offset header1
    int 21h

    mov dx, offset header2
    int 21h

    call pnl

    mov ah, 09h
    mov dx, offset ttl
    int 21h

    mov ah, 09h

    mov dx, offset one
    int 21h

    mov dx, offset two
    int 21h
    mov dx, offset three
    int 21h
    mov dx, offset four
    int 21h
    mov dx, offset five
    int 21h
    mov dx, offset six
    int 21h
    mov dx, offset seven
    int 21h
    
    mov dx, offset choice
    int 21h

    mov ah, 0Ah
    mov dx, offset inputBuf
    int 21h

    call pnl

    cmp inputBuf+2, '1'
    je blnc

    cmp inputBuf+2, '2'
    je wd

    cmp inputBuf+2, '3'
    je depo

    cmp inputBuf+2, '4'
    je tfr

    cmp inputBuf+2, '5'
    je blpy

    cmp inputBuf+2, '6'
    je chpin

    cmp inputBuf+2, '7'
    jmp near ptr endend

    jmp main


blnc:
    call pnl
    mov dx, offset chosen 
    int 21h 

    mov ah, 09h
    mov dx, offset one 
    int 21h

    call pnl

    jmp end_prog
wd:
    call pnl
    mov dx, offset chosen 
    int 21h 

    mov ah, 09h
    mov dx, offset two
    int 21h

    call pnl

    jmp end_prog

depo:
    call pnl
    mov dx, offset chosen 
    int 21h 

    mov ah, 09h
    mov dx, offset three
    int 21h

    call pnl

    jmp end_prog

tfr:
    call pnl
    mov dx, offset chosen 
    int 21h 

    mov ah, 09h
    mov dx, offset four
    int 21h

    call pnl

    jmp end_prog

blpy:
    call pnl
    mov dx, offset chosen 
    int 21h 

    mov ah, 09h
    mov dx, offset five
    int 21h

    call pnl

    jmp end_prog

chpin:
    call pnl
    mov dx, offset chosen 
    int 21h 

    mov ah, 09h
    mov dx, offset six
    int 21h

    call pnl

    jmp end_prog

endend:
    call pnl
    mov dx, offset chosen 
    int 21h

    mov ah, 09h
    mov dx, offset seven
    int 21h

    call pnl

    jmp end_prog

end_prog:

    mov ah, 09h
    mov dx, offset egreet
    int 21h 
    mov ah, 4Ch
    int 21h
pnl proc 
    mov ah, 09h
    mov dx, offset nl
    int 21h
    ret

pnl endp

end main

; Filename: EXER27.asm
; Name: Ethan Benedict M. Labajo
; Date: September 12, 2025
; Cebu Institute of Technology - University Vehicle Sticker Application Form with Input Handling and GUI

.model small
.stack 100h

.data
    nl db 0Ah, '$'
    header db "Cebu Institute of Technology - University", 0Ah, "VEHICLE STICKER APPLICATION FORM", 0Ah, '$'

    prompt db "Please enter the needed information: ", 0Ah, '$'
    summary db "SUMMARY", 0Ah, '$'

    ; LABELS FOR PROMPTS
    personnelType db "Personnel Type: $"
    nm db "Name of Applicant/Driver: $"
    mbnumber db "Mobile Number: $"
    brand db "Vehicle Make(s)/Brand: $"
    color db "Vehicle Color: $"
    stickerType db "Vehicle Sticker Type: $"
    idno db "ID Number: $"
    address db "Address: $"
    plateno db "Plate Number: $"
    vehicleType db "Vehicle Type: $"

    ; INPUT BUFFERS
    inpt db 100, ?, 100 dup('$')
    inname db 100, ?, 100 dup('$')
    inmbno db 100, ?, 100 dup('$')
    inbrand db 100, ?, 100 dup('$')
    inclr db 100, ?, 100 dup('$')
    inst db 100, ?, 100 dup('$')
    inid db 100, ?, 100 dup('$')
    inadr db 100, ?, 100 dup('$')
    inptno db 100, ?, 100 dup('$')
    invt db 100, ?, 100 dup('$')

    ; GUI
    px db "  ", '$'
    px2 db "    ", '$'
    px4 db "      ", '$'
    long db "                                        ", '$'
    tn db "          ", '$'
    tt db "                    ", '$'
    tts db "                  ", '$'

    hdr db '              ', "Cebu Institute of Technology - University", '$'
    hdr2 db '                 ', "VEHICLE STICKER APPLICATION FORM  ", '$'
    hdr3 db '                    ', "Please fill out form below.                        ", '$'

    yv db 'V', '$'

    p1 db "Personnel Type:                         Vehicle Sticker Type:             ", '$'
    p2 db "Name of Applicant/Driver:               ID Number:                        ", '$'
    p3 db "Mobile Number:                          Address:                          ", '$'
    p4 db "Vehicle Make(s)/Brand:                  Plate Number:                     ", '$'
    p5 db "Vehicle Color:                          Vehicle Type:                     ", '$'

    psub db "  SUBMIT  ", '$'
    pend db "  Copyright 2025 ETHAN BENEDICT M. LABAJO  ", '$'
    thnk db " Thank you! ", '$'

.code
main:
    mov ax, @data
    mov ds, ax

    mov ax, 3
    int 10h

    mov ah, 09h

    mov dx, offset header
    int 21h

    mov dx, offset prompt
    int 21h

    call pnl

    mov dx, offset personnelType
    int 21h

    mov ah, 0Ah
    mov dx, offset inpt
    int 21h

    mov si, offset inpt + 2
    mov cl, [inpt+1]
    add si, cx
    mov byte ptr [si], '$'
    inc byte ptr [inpt+1]

    call pnl

    mov ah, 09h
    mov dx, offset nm
    int 21h

    mov ah, 0Ah
    mov dx, offset inname
    int 21h
    mov si, offset inname + 2
    mov cl, [inname+1]   ; string length
    add si, cx
    mov byte ptr [si], '$'


    call pnl


    mov ah, 09h
    mov dx, offset mbnumber
    int 21h

    mov ah, 0Ah
    mov dx, offset inmbno
    int 21h

    mov si, offset inmbno + 2
    mov cl, [inmbno+1]   ; string length
    add si, cx
    mov byte ptr [si], '$'

    call pnl

    mov ah, 09h
    mov dx, offset brand
    int 21h

    mov ah, 0Ah
    mov dx, offset inbrand
    int 21h

    mov si, offset inbrand + 2
    mov cl, [inbrand+1]   ; string length
    add si, cx
    mov byte ptr [si], '$'

    call pnl

    mov ah, 09h
    mov dx, offset color
    int 21h

    mov ah, 0Ah
    mov dx, offset inclr
    int 21h

    mov si, offset inclr + 2
    mov cl, [inclr+1]   ; string length
    add si, cx
    mov byte ptr [si], '$'

    call pnl

    mov ah, 09h
    mov dx, offset stickerType
    int 21h

    mov ah, 0Ah
    mov dx, offset inst
    int 21h

    mov si, offset inst + 2
    mov cl, [inst+1]   ; string length
    add si, cx
    mov byte ptr [si], '$'

    call pnl

    mov ah, 09h
    mov dx, offset idno
    int 21h

    mov ah, 0Ah
    mov dx, offset inid
    int 21h

    mov si, offset inid + 2
    mov cl, [inid+1]   ; string length
    add si, cx
    mov byte ptr [si], '$'

    call pnl

    mov ah, 09h
    mov dx, offset address
    int 21h

    mov ah, 0Ah
    mov dx, offset inadr
    int 21h

    mov si, offset inadr + 2
    mov cl, [inadr+1]   ; string length
    add si, cx
    mov byte ptr [si], '$'

    call pnl

    mov ah, 09h
    mov dx, offset plateno
    int 21h

    mov ah, 0Ah
    mov dx, offset inptno
    int 21h

    mov si, offset inptno + 2
    mov cl, [inptno+1]   ; string length
    add si, cx
    mov byte ptr [si], '$'

    call pnl


    mov ah, 09h
    mov dx, offset vehicleType
    int 21h

    mov ah, 0Ah
    mov dx, offset invt
    int 21h

    mov si, offset invt + 2
    mov cl, [invt+1]   ; string length
    add si, cx
    mov byte ptr [si], '$'


    call pnl

    mov ah, 09h
    mov dx, offset summary
    int 21h

    ; DRAW GUI

    mov bl, 000h
    mov cx, 100
    int 10h

    mov ah, 09h
    mov dx, offset long
    int 21h
    mov dx, offset long
    int 21h
    mov dx, offset tt 
    int 21h

    call pnl 

    call pclr

    mov bl, 000h
    mov cx, 2 
    int 10h 

    mov dx, offset px 
    int 21h

    mov bl, 0FFh
    mov cx, 2 
    int 10h

    mov dx, offset px 
    int 21h


    mov bl, 04Fh
    mov cx, 82
    int 10h

    mov dx, offset hdr
    int 21h
    mov dx, offset tn
    int 21h
    mov dx, offset px4
    int 21h


    mov bl, 0FFh
    mov cx, 2
    int 10h

    mov ah, 09h
    mov dx, offset px 
    int 21h
    call pclr

    mov bl, 000h
    mov cx, 2   
    int 10h

    mov dx, offset px 
    int 21h 

    mov bl, 0FFh
    mov cx, 2
    int 10h

    mov dx, offset px
    int 21h

    mov bl, 04Fh
    mov cx, 71
    int 10h
    
    mov ah, 09h
    mov dx, offset hdr2
    int 21h
    mov dx, offset tn
    int 21h
    mov dx, offset tn
    int 21h


    mov bl, 0FFh
    mov cx, 2
    int 10h

    mov ah, 09h
    mov dx, offset px 
    int 21h

    call pclr

    mov bl, 000h
    mov cx, 2
    int 10h

    mov dx, offset px
    int 21h

    mov bl, 0FFh
    mov cx, 2
    int 10h

    mov dx, offset px
    int 21h

    mov bl, 04Eh
    mov cx, 71
    int 10h

    mov ah, 09h
    mov dx, offset hdr3
    int 21h

    mov bl, 0FFh
    mov cx, 2
    int 10h

    mov ah, 09h
    mov dx, offset px
    int 21h

    call pclr

    mov bl, 000h
    mov cx, 2
    int 10h

    mov ah, 09h
    mov dx, offset px
    int 21h

    mov bl, 0FFh
    mov cx, 75
    int 10h

    mov ah, 09h
    mov dx, offset long
    int 21h

    mov dx, offset tt
    int 21h
 
    mov dx, offset tt
    int 21h  
    mov bl, 0FFh
    mov cx, 2
    int 10h

    mov ah, 09h
    mov dx, offset px
    int 21h

    mov bl, 070h
    mov cx, 73
    int 10h

    mov dx, offset p1
    int 21h

    mov ax, 0B800h
    mov es, ax
    mov si, offset inpt + 2
    mov di, (22*80 + 30)*2      

pr_pt:
    lodsb                      
    cmp al, '$'              
    je dp_pt

    mov es:[di], al            
    mov byte ptr es:[di+1], 070h   

    add di, 2
    jmp pr_pt

dp_pt:

    mov ax, 0B800h
    mov es, ax
    mov si, offset inst + 2
    mov di, (22*80 + 66)*2       ; (row*80 + col) * 2

pr_st:
    lodsb                      ; load next character into AL
    cmp al, '$'                ; end of string?
    je dp_st

    mov es:[di], al            ; print character
    mov byte ptr es:[di+1], 070h   ; always default color (black on white)

    add di, 2
    jmp pr_st

dp_st:

    call pclr

    mov ah, 09h
    mov bl, 000h
    mov cx, 2
    int 10h 

    mov dx, offset px 
    int 21h

    mov bl, 0FFh
    mov cx, 2
    int 10h 

    mov dx, offset px 
    int 21h


    mov bl, 070h
    mov cx, 73
    int 10h

    mov dx, offset p2
    int 21h

    mov ax, 0B800h
    mov es, ax
    mov si, offset inname + 2
    mov di, (23*80 + 30)*2      

pr_nm:
    lodsb                      
    cmp al, '$'              
    je dp_nm

    mov es:[di], al            
    mov byte ptr es:[di+1], 070h   

    add di, 2
    jmp pr_nm

dp_nm:

    mov ax, 0B800h
    mov es, ax
    mov si, offset inid + 2
    mov di, (23*80 + 66)*2       ; (row*80 + col) * 2

pr_id:
    lodsb                      ; load next character into AL
    cmp al, '$'                ; end of string?
    je dp_id

    mov es:[di], al            ; print character
    mov byte ptr es:[di+1], 070h   ; always default color (black on white)

    add di, 2
    jmp pr_id

dp_id:

    call pclr

    mov ah, 09h
    mov bl, 000h
    mov cx, 2
    int 10h 

    mov dx, offset px 
    int 21h

    mov bl, 0FFh
    mov cx, 2
    int 10h 

    mov dx, offset px 
    int 21h


    mov bl, 070h
    mov cx, 73
    int 10h

    mov dx, offset p3
    int 21h

    mov ax, 0B800h
    mov es, ax
    mov si, offset inmbno + 2
    mov di, (24*80 + 30)*2      

pr_mb:
    lodsb                      
    cmp al, '$'              
    je dp_mb

    mov es:[di], al            
    mov byte ptr es:[di+1], 070h   

    add di, 2
    jmp pr_mb

dp_mb:

    mov ax, 0B800h
    mov es, ax
    mov si, offset inadr + 2
    mov di, (24*80 + 66)*2       ; (row*80 + col) * 2

pr_adr:
    lodsb                      ; load next character into AL
    cmp al, '$'                ; end of string?
    je dp_adr

    mov es:[di], al            ; print character
    mov byte ptr es:[di+1], 070h   ; always default color (black on white)

    add di, 2
    jmp pr_adr

dp_adr:

    call pclr

    mov ah, 09h
    mov bl, 000h
    mov cx, 2
    int 10h 

    mov dx, offset px 
    int 21h

    mov bl, 0FFh
    mov cx, 2
    int 10h 

    mov dx, offset px 
    int 21h


    mov bl, 070h
    mov cx, 73
    int 10h

    mov dx, offset p4
    int 21h

    mov ax, 0B800h
    mov es, ax
    mov si, offset inbrand + 2
    mov di, (24*80 + 30)*2      

pr_brand:
    lodsb                      
    cmp al, '$'              
    je dp_brand

    mov es:[di], al            
    mov byte ptr es:[di+1], 070h   

    add di, 2
    jmp pr_brand

dp_brand:

    mov ax, 0B800h
    mov es, ax
    mov si, offset inptno + 2
    mov di, (24*80 + 66)*2       ; (row*80 + col) * 2

pr_ptno:
    lodsb                      ; load next character into AL
    cmp al, '$'                ; end of string?
    je dp_ptno

    mov es:[di], al            ; print character
    mov byte ptr es:[di+1], 070h   ; always default color (black on white)

    add di, 2
    jmp pr_ptno

dp_ptno:

    call pclr

    mov ah, 09h
    mov bl, 000h
    mov cx, 2
    int 10h 

    mov dx, offset px 
    int 21h

    mov bl, 0FFh
    mov cx, 2
    int 10h 

    mov dx, offset px 
    int 21h


    mov bl, 070h
    mov cx, 73
    int 10h

    mov dx, offset p5
    int 21h

    mov ax, 0B800h
    mov es, ax
    mov si, offset inclr + 2
    mov di, (24*80 + 30)*2      

pr_clr:
    lodsb                      
    cmp al, '$'              
    je dp_clr

    mov es:[di], al            
    mov byte ptr es:[di+1], 070h   

    add di, 2
    jmp pr_clr

dp_clr:

    mov ax, 0B800h
    mov es, ax
    mov si, offset invt + 2
    mov di, (24*80 + 66)*2       ; (row*80 + col) * 2

pr_vt:
    lodsb                      ; load next character into AL
    cmp al, '$'                ; end of string?
    je dp_vt

    mov es:[di], al            ; print character
    mov byte ptr es:[di+1], 070h   ; always default color (black on white)

    add di, 2
    jmp pr_vt

dp_vt:

    call pclr

    mov ah, 09h
    mov bl, 000h
    mov cx, 2
    int 10h 

    mov dx, offset px 
    int 21h

    mov bl, 0FFh
    mov cx, 2
    int 10h 

    mov dx, offset px 
    int 21h


    mov bl, 070h
    mov cx, 73
    int 10h

    mov dx, offset long
    int 21h

    mov dx, offset tt
    int 21h
    mov dx, offset px4
    int 21h
    mov dx, offset px2
    int 21h
    mov dx, offset px2
    int 21h

    call pclr
    mov ah, 09h
    mov bl, 000h
    mov cx, 2
    int 10h 

    mov dx, offset px 
    int 21h

    mov bl, 0FFh
    mov cx, 2
    int 10h 

    mov dx, offset px 
    int 21h


    mov bl, 070h
    mov cx, 30
    int 10h

    mov dx, offset tts
    int 21h
    mov dx, offset tn
    int 21h

    mov bl, 04Eh
    mov cx, 10
    int 10h 
     
    mov dx, offset psub
    int 21h
    mov bl, 070h
    mov cx, 35
    int 10h

    mov dx, offset tt
    int 21h
    mov dx, offset px4
    int 21h
    mov dx, offset px2
    int 21h
    mov dx, offset px2
    int 21h
    mov dx, offset px
    int 21h

    call pclr
    mov ah, 09h
    mov bl, 000h
    mov cx, 2
    int 10h 

    mov dx, offset px 
    int 21h

    mov bl, 0FFh
    mov cx, 2
    int 10h 

    mov dx, offset px 
    int 21h


    mov bl, 070h
    mov cx, 73
    int 10h

    mov dx, offset long
    int 21h
    mov dx, offset tt
    int 21h
    mov dx, offset tn
    int 21h
    mov dx, offset px2
    int 21h
    call pclr

    mov ah, 09h
    mov bl, 000h
    mov cx, 2
    int 10h 

    mov dx, offset px 
    int 21h

    mov bl, 0FFh
    mov cx, 2
    int 10h 

    mov dx, offset px 
    int 21h

    mov bl, 070h
    mov cx, 73
    int 10h

    mov dx, offset px4
    int 21h
    mov dx, offset px2
    int 21h
    mov dx, offset px2
    int 21h

    mov dx, offset pend 
    int 21h

    mov dx, offset tt 
    int 21h
    mov dx, offset px
    int 21h
    call pclr

    mov bl, 000h 
    mov cx, 30 
    int 10h 

    mov dx, offset tt 
    int 21h 

    mov dx, offset tn
    int 21h 
    mov dx, offset px
    int 21h 


    mov bl, 0Eh 
    mov cx, 11
    int 10h 

    mov dx, offset thnk
    int 21h

    mov ax, 0B800h
    mov es, ax

    mov di, (14*80 + 40)*2   
    mov al, 'V'              
    mov es:[di], al
    mov byte ptr es:[di+1], 4Fh 

    mov ax, 0B800h
    mov es, ax

    mov di, (18*80 + 40)*2   
    mov al, 'V'              
    mov es:[di], al
    mov byte ptr es:[di+1], 4Fh 

    mov ax, 0B800h
    mov es, ax

    mov di, (14*80 + 74)*2   
    mov al, 'V'              
    mov es:[di], al
    mov byte ptr es:[di+1], 4Fh 

    mov di, (18*80 + 74)*2   
    mov al, 'V'              
    mov es:[di], al
    mov byte ptr es:[di+1], 4Fh 



    jmp end_prog



pclr proc
    mov bl, 000h
    mov cx, 100
    int 10h
pclr endp
pnl proc
    mov ah, 09h
    mov dx, offset nl
    int 21h
    ret
pnl endp

end_prog:
    mov ax, 4C00h
    int 21h

end main